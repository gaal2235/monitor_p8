name: Production Web Build Linux 173

on:
  push:
    branches: [ main ]

env:
  project: monitor-geral-p8monitorgeral
  folder: production
  version: ""
  flutter_version: ${{ secrets.FLUTTER_VERSION }}
  labs_path: ${{ secrets.PATH_PROD }}
  rollback_by_commit: ${{ secrets.rollback_by_commit }}
  api_base: ${{ secrets.API_PROD }}
  project_url: 'monitorgeral'

jobs:
  build:
    runs-on: [ self-hosted, Linux, 173 ]
    steps:
      - uses: actions/checkout@v3
        with:
          path: ${{ github.workspace }}/${{ env.folder }}
          clean: false
      - name: Create Nginx Location
        uses: "DamianReeves/write-file-action@master"
        with:
          path: ${{ github.workspace }}/${{ env.folder }}/location_config/${{ env.project }}.conf
          write-mode: overwrite
          contents: |
            location /${{ env.project_url }} {
                alias /apps/${{ env.project }}${{ env.version != '' && '/' || '' }}${{ env.version }}/;
                try_files $uri $uri/ = 404;
            }
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.flutter_version }}
      - name: Go to folder fetch data and build
        run: |
          cd ${{ env.folder }}
          flutter clean
          flutter pub get
          flutter build web --no-tree-shake-icons --dart-define="apiBase"=${{ env.api_base }}

  deploy:
    needs: build
    runs-on: [ self-hosted, Linux, 173 ]
    steps:
      - name: Make backup
        run: |
          echo TODO
      - name: Copy last update
        run: |
          rsync -avu --delete ${{ github.workspace }}/${{ env.folder }}/build/web/ ~/${{ env.folder }}/apps/${{ env.project }}${{ env.version != '' && '/' || '' }}${{ env.version }}

  location:
    needs: deploy
    runs-on: [ self-hosted, Linux, 173 ]
    steps:
      - name: Backup of Nginx location folder
        run: |
           echo TODO
      - name: Copy server nginx
        run: |
          yes|cp -ruva ${{ github.workspace }}/${{ env.folder }}/location_config/*.conf ~/${{ env.folder }}/nginx_labs/labs/locations | true
      - name: Reload Nginx
        run: |
          docker exec nginx nginx -s reload

  rollback:
    needs: [ build, deploy, location ]
    runs-on: [ self-hosted, Linux, 173 ]
    if: always() && ( needs.deploy.result == 'failure' || needs.location.result == 'failure' )
    steps:
      - name: TODO
        run: |
          echo TODO

  send_telegram_notification:
    runs-on: ubuntu-latest
    needs: [ build, deploy, location, rollback ]
    if: always()
    steps:
      - name: Send telegram message end
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO_PROD }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ env.folder == 'production' && '⚠ Production' || 'Homolog' }} deploy completed with: ${{ (needs.build.result == 'success' && needs.deploy.result == 'success' && needs.location.result == 'success') && ' ✅ Success' || ' ❌ Failure' }}
            
            Url: https://carajaslabs.com.br/${{ env.project_url }}
            
            Repository: ${{ github.repository }}
            ${{ github.actor }} created commit to branch: ${{ github.ref_name }}:
            Commit message: ${{ github.event.commits[0].message == '' && 'Rollback from break' || github.event.commits[0].message }}
            
            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
            
            See Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ${{ needs.rollback.result == 'skipped' && format('See previous commit: https://github.com/{0}/commit/{1}', github.repository, github.event.before) || ( secrets.rollback_by_commit == 'true' && format('RollBack to: https://github.com/{0}/commit/{1}', github.repository, github.event.before) || 'RollBack made from folder' ) }}
            ${{ needs.rollback.result == 'skipped' && ' ' || ( needs.rollback.result == 'success' && ( secrets.rollback_by_commit == 'true' && format('✅ RollBack iniciado com sucesso no commit: {0} workflow em execução', github.event.before) || '✅ RollBack realizado com sucesso' ) || '❌ Error ao realizar rollback' ) }}
            
            Jobs:
              Build: ${{ needs.build.result == 'success' && ' 🟢 Success' || ( needs.build.result == 'failure' && ' 🔴 Failure' || ( needs.build.result == 'skipped' && ' ⚪ Skipped' || ' 🟠 Cancelled' ) ) }}
              Deploy: ${{ needs.deploy.result == 'success' && ' 🟢 Success' || ( needs.deploy.result == 'failure' && ' 🔴 Failure' || ( needs.deploy.result == 'skipped' && ' ⚪ Skipped' || ' 🟠 Cancelled' ) ) }}
              Location: ${{ needs.location.result == 'success' && ' 🟢 Success' || ( needs.location.result == 'failure' && ' 🔴 Failure' || ( needs.location.result == 'skipped' && ' ⚪ Skipped' || ' 🟠 Cancelled' ) ) }}
              Rollback: ${{ needs.rollback.result == 'success' && ' 🟢 Success' || ( needs.rollback.result == 'failure' && ' 🔴 Failure' || ( needs.rollback.result == 'skipped' && ' ⚪ Skipped' || ' 🟠 Cancelled' ) ) }}
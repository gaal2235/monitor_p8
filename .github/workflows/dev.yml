name: Homolog Flutter Web Build

on:
  push:
    branches: [ dev ]

env:
  project: monitor-geral-p8monitorgeral
  folder: developer
  version: developer
  flutter_version: ${{ secrets.FLUTTER_VERSION }}
  labs_path: ${{ secrets.PATH_DEV }}
  rollback_by_commit: ${{ secrets.rollback_by_commit }}
  api_base: ${{ secrets.API_DEV }}
  project_url: 'monitorgeral'

jobs:
  build:
    runs-on: [ self-hosted, Windows, developer ]
    steps:
      - uses: actions/checkout@v3
        with:
          path: ${{ github.workspace }}\${{ env.folder }}
          clean: false
      - name: Create Nginx Location
        uses: "DamianReeves/write-file-action@master"
        with:
          path: ${{ github.workspace }}\${{ env.folder }}\location_config\${{ env.project }}_${{ env.folder }}.conf
          write-mode: overwrite
          contents: |
            location /${{ env.project_url }} {
                alias ${{ env.labs_path }}/${{ env.folder }}/apps/${{ env.project }}${{ env.version != '' && '/' || '' }}${{ env.version }}/;
                try_files $uri $uri/ = 404;
            }
      - uses: joeserhtf/flutter-action@main
        with:
          flutter-version: ${{ env.flutter_version }}
      - name: Go to folder fetch data and build
        run: |
          cd ${{ env.folder }}
          flutter clean
          flutter pub get
          flutter build web --no-tree-shake-icons --dart-define="apiBase"="../.."

  deploy:
    needs: build
    runs-on: [ self-hosted, Windows, developer ]
    steps:
      - name: Make backup
        run: |
          if (Test-Path -Path ${{ env.labs_path }}\${{ env.folder }}\apps\${{ env.project }}${{ env.version != '' && '\' || '' }}${{ env.version }}) {
            XCOPY ${{ env.labs_path }}\${{ env.folder }}\apps\${{ env.project }}${{ env.version != '' && '\' || '' }}${{ env.version }} ${{ env.labs_path }}\${{ env.folder }}\backup\apps\${{ env.project }}${{ env.version != '' && '\' || '' }}${{ env.version }} /D /E /Y /I
          } else {
            echo "First deploy no backup available"
          }
      - name: Copy last update
        run: |
          XCOPY ${{ github.workspace }}\${{ env.folder }}\build\web\assets\assets ${{ github.workspace }}\${{ env.folder }}\build\web\assets /D /E /Y /I
          XCOPY ${{ github.workspace }}\${{ env.folder }}\build\web ${{ env.labs_path }}\${{ env.folder }}\apps\${{ env.project }}${{ env.version != '' && '\' || '' }}${{ env.version }} /D /E /Y /I

  location:
    needs: deploy
    runs-on: [ self-hosted, Windows, developer ]
    steps:
      - name: Backup of Nginx location folder
        run: |
          XCOPY ${{ env.labs_path }}\${{ env.folder }}\nginx_labs\labs\${{ env.project }}*.conf ${{ env.labs_path }}\${{ env.folder }}\nginx_labs\backup\labs /D /E /Y /I
      - name: Copy server nginx
        run: |
          XCOPY ${{ github.workspace }}\${{ env.folder }}\location_config\*_${{ env.folder }}.conf ${{ env.labs_path }}\${{ env.folder }}\nginx_labs\labs\locations /D /E /Y /I
          if ('${{ env.folder }}' -eq 'production') {
            XCOPY ${{ github.workspace }}\${{ env.folder }}\location_config\*_server.conf ${{ env.labs_path }}\${{ env.folder }}\nginx_labs\labs\servers /D /E /Y /I
          }
      - name: Reload Nginx
        run: |
          cd ${{ env.labs_path }}\${{ env.folder }}\nginx_labs
          .\nginx -s reload

  rollback:
    needs: [ build, deploy, location ]
    runs-on: [ self-hosted, Windows, homolog ]
    if: always() && ( needs.deploy.result == 'failure' || needs.location.result == 'failure' )
    steps:
      - name: Set up token
        if: ${{ env.rollback_by_commit == 'true' }}
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.ACTIONS_TOKEN }}
          path: ${{ github.workspace }}\${{ env.folder }}
          clean: false
      - name: Backup from old commit
        if: ${{ env.rollback_by_commit == 'true' }}
        run: |
          cd ${{ env.folder }}
          git push --force origin ${{ github.event.before }}:${{ github.ref_name }}
      - name: Copy backup from folder
        if: ${{ env.rollback_by_commit != 'true' }}
        run: |
          XCOPY ${{ env.labs_path }}\${{ env.folder }}\backup\apps\${{ env.project }}${{ env.version != '' && '\' || '' }}${{ env.version }} ${{ env.labs_path }}\${{ env.folder }}\apps\${{ env.project }}${{ env.version != '' && '\' || '' }}${{ env.version }} /E /Y /I
      - name: Backup nginx to remove wrong config
        if: ${{ env.rollback_by_commit != 'true' && needs.location.result == 'failure' }}
        run: |
          XCOPY ${{ env.labs_path }}\${{ env.folder }}\nginx_labs\backup\labs\${{ env.project }}*.conf ${{ env.labs_path }}\${{ env.folder }}\nginx_labs\labs /E /Y /I
          cd ${{ env.labs_path }}\${{ env.folder }}\nginx_labs
          .\nginx -s reload

  send_telegram_notification:
    runs-on: ubuntu-latest
    needs: [ build, deploy, location, rollback ]
    if: always()
    steps:
      - name: Send telegram message end
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ env.folder == 'production' && '‚ö† Production' || 'Homolog' }} deploy completed with: ${{ (needs.build.result == 'success' && needs.deploy.result == 'success' && needs.location.result == 'success') && ' ‚úÖ Success' || ' ‚ùå Failure' }}

            Url: https://dev.carajaslabs.com.br/${{ env.project_url }}

            Repository: ${{ github.repository }}
            ${{ github.actor }} created commit to branch: ${{ github.ref_name }}:
            Commit message: ${{ github.event.commits[0].message == '' && 'Rollback from break' || github.event.commits[0].message }}

            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}

            See Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

            ${{ needs.rollback.result == 'skipped' && format('See previous commit: https://github.com/{0}/commit/{1}', github.repository, github.event.before) || ( secrets.rollback_by_commit == 'true' && format('RollBack to: https://github.com/{0}/commit/{1}', github.repository, github.event.before) || 'RollBack made from folder' ) }}
            ${{ needs.rollback.result == 'skipped' && ' ' || ( needs.rollback.result == 'success' && ( secrets.rollback_by_commit == 'true' && format('‚úÖ RollBack iniciado com sucesso no commit: {0} workflow em execu√ß√£o', github.event.before) || '‚úÖ RollBack realizado com sucesso' ) || '‚ùå Error ao realizar rollback' ) }}

            Jobs:
              Build: ${{ needs.build.result == 'success' && ' üü¢ Success' || ( needs.build.result == 'failure' && ' üî¥ Failure' || ( needs.build.result == 'skipped' && ' ‚ö™ Skipped' || ' üü† Cancelled' ) ) }}
              Deploy: ${{ needs.deploy.result == 'success' && ' üü¢ Success' || ( needs.deploy.result == 'failure' && ' üî¥ Failure' || ( needs.deploy.result == 'skipped' && ' ‚ö™ Skipped' || ' üü† Cancelled' ) ) }}
              Location: ${{ needs.location.result == 'success' && ' üü¢ Success' || ( needs.location.result == 'failure' && ' üî¥ Failure' || ( needs.location.result == 'skipped' && ' ‚ö™ Skipped' || ' üü† Cancelled' ) ) }}
              Rollback: ${{ needs.rollback.result == 'success' && ' üü¢ Success' || ( needs.rollback.result == 'failure' && ' üî¥ Failure' || ( needs.rollback.result == 'skipped' && ' ‚ö™ Skipped' || ' üü† Cancelled' ) ) }}